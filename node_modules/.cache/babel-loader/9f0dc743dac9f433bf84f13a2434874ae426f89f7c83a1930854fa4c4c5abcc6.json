{"ast":null,"code":"import axios from 'axios';\n\n// OpenWeatherMap API configuration\nconst API_KEY = 'YOUR_API_KEY'; // Replace with your actual API key\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Create axios instance with common configuration\nconst weatherApi = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    appid: API_KEY,\n    units: 'metric' // Use metric units (Celsius)\n  }\n});\n\n/**\n * Fetch current weather data for a city\n * @param cityName Name of the city to fetch weather for\n * @returns Weather data for the city\n */\nexport const fetchCityWeather = async cityName => {\n  try {\n    const response = await weatherApi.get('/weather', {\n      params: {\n        q: cityName\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch hourly forecast for a city\n * @param cityName Name of the city to fetch forecast for\n * @returns Hourly forecast data for the city\n */\nexport const fetchCityHourlyForecast = async cityName => {\n  try {\n    const response = await weatherApi.get('/forecast', {\n      params: {\n        q: cityName\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching hourly forecast:', error);\n    throw error;\n  }\n};\nexport default weatherApi;","map":{"version":3,"names":["axios","API_KEY","BASE_URL","weatherApi","create","baseURL","params","appid","units","fetchCityWeather","cityName","response","get","q","data","error","console","fetchCityHourlyForecast"],"sources":["/Users/maczone/WebstormProjects/weatherHelper/src/api/weatherApi.ts"],"sourcesContent":["import axios from 'axios';\n\n// OpenWeatherMap API configuration\nconst API_KEY = 'YOUR_API_KEY'; // Replace with your actual API key\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\n// Create axios instance with common configuration\nconst weatherApi = axios.create({\n  baseURL: BASE_URL,\n  params: {\n    appid: API_KEY,\n    units: 'metric', // Use metric units (Celsius)\n  },\n});\n\n/**\n * Fetch current weather data for a city\n * @param cityName Name of the city to fetch weather for\n * @returns Weather data for the city\n */\nexport const fetchCityWeather = async (cityName: string) => {\n  try {\n    const response = await weatherApi.get('/weather', {\n      params: {\n        q: cityName,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    throw error;\n  }\n};\n\n/**\n * Fetch hourly forecast for a city\n * @param cityName Name of the city to fetch forecast for\n * @returns Hourly forecast data for the city\n */\nexport const fetchCityHourlyForecast = async (cityName: string) => {\n  try {\n    const response = await weatherApi.get('/forecast', {\n      params: {\n        q: cityName,\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching hourly forecast:', error);\n    throw error;\n  }\n};\n\nexport default weatherApi;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,cAAc,CAAC,CAAC;AAChC,MAAMC,QAAQ,GAAG,yCAAyC;;AAE1D;AACA,MAAMC,UAAU,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC9BC,OAAO,EAAEH,QAAQ;EACjBI,MAAM,EAAE;IACNC,KAAK,EAAEN,OAAO;IACdO,KAAK,EAAE,QAAQ,CAAE;EACnB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAgB,IAAK;EAC1D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,UAAU,CAACS,GAAG,CAAC,UAAU,EAAE;MAChDN,MAAM,EAAE;QACNO,CAAC,EAAEH;MACL;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,uBAAuB,GAAG,MAAOP,QAAgB,IAAK;EACjE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMR,UAAU,CAACS,GAAG,CAAC,WAAW,EAAE;MACjDN,MAAM,EAAE;QACNO,CAAC,EAAEH;MACL;IACF,CAAC,CAAC;IACF,OAAOC,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAeZ,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}